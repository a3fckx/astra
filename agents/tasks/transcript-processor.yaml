name: Update User Overview From Transcript
description: >
  Merge the latest conversation transcript with the previous MongoDB user_overview and
  persist fresh memories to Memory Store when available.
project: astra

input_schema:
  type: object
  required:
    - julep_user_id
    - conversation_id
    - transcript_text
  properties:
    julep_user_id:
      type: string
      description: The Julep user identifier (maps 1:1 with the MongoDB user record)
    conversation_id:
      type: string
      description: ElevenLabs conversation identifier
    transcript_text:
      type: string
      description: Full transcript text for the conversation (already fetched upstream)
    existing_overview:
      type: object
      description: Latest MongoDB user_overview document or null when not available
    memory_store_token:
      type: string
      description: Optional Memory Store MCP token to persist long-term memories

tools:
  - name: mcp_discover
    description: Discover available Memory Store MCP tools
    type: integration
    integration:
      provider: mcp
      method: list_tools
      setup:
        transport: command
        command: npx
        args:
          - mcp-remote
          - $ f"https://beta.memory.store/mcp/?token={_.memory_store_token}"

  - name: mcp_execute
    description: Execute Memory Store MCP tools
    type: integration
    integration:
      provider: mcp
      method: call_tool
      setup:
        transport: command
        command: npx
        args:
          - mcp-remote
          - $ f"https://beta.memory.store/mcp/?token={_.memory_store_token}"

main:
  # Prep context for the LLM prompt
  - evaluate:
      overview_context: $ _.existing_overview or {}
      transcript_context: $ _.transcript_text.strip()
      overview_json: $ json.dumps(_.existing_overview or {}, indent=2)

  # Generate structured updates from transcript + existing overview
  - prompt: |-
      You maintain the `user_overview` record for Astra's astrology companion.
      Combine the previous overview with the new transcript to produce incremental updates.

      Previous overview (JSON):
      {steps[0].output.overview_json}

      New conversation transcript:
      ```
      {steps[0].output.transcript_context}
      ```

      Respond with **only** valid JSON matching this schema:
      {{
        "overview_updates": {{
          "profile_summary": "string | null",
          "preferences": {{
            "communication_style": "casual | balanced | formal | neutral | null",
            "topics_of_interest": ["topic1", "topic2"],
            "hinglish_level": 0-100,
            "flirt_opt_in": true | false | null,
            "astrology_system": "vedic | western | both | null",
            "notification_preferences": object | null,
            "favorite_astro_topics": ["topic"]
          }},
          "insights": [
            {{
              "type": "insight | pattern | milestone",
              "content": "concise insight text",
              "generated_at": "ISO timestamp"
            }}
          ],
          "latest_horoscope": {{
            "date": "YYYY-MM-DD",
            "content": "optional horoscope text",
            "transit_highlights": ["string"]
          }},
          "gamification": {{
            "streak_days": number | null,
            "total_conversations": number | null,
            "milestones": ["string"],
            "points": number | null,
            "level": number | null
          }}
        }},
        "conversation_summary": {{
          "summary": "2-4 sentence recap",
          "topics": ["topic keywords"],
          "key_insights": ["bullet insight"],
          "questions_asked": ["user question"],
          "emotional_tone": "one or two words",
          "follow_up_actions": ["optional action items"]
          }},
          "memories": [
            {{
              "title": "short title",
              "content": "memory content to store long-term",
              "importance": "low | normal | high"
            }}
          ]
        }},
        "birth_details": {{
          "city": "City name or null",
          "country": "Country name or null",
          "place_text": "Full birth place text or null"
        }}
      }}

      Rules:
      - Preserve previous values by leaving fields null when nothing changed.
      - Never invent data; rely only on the transcript.
      - `hinglish_level` should be an integer between 0 and 100.
      - Limit `memories` to high-signal facts or commitments.
    unwrap: true

  # Parse LLM output
  - evaluate:
      parsed: $ json.loads(steps[1].output)

  # Normalize optional sections
  - evaluate:
      overview_updates: $ steps[2].output.get("overview_updates", {})
      conversation_summary: $ steps[2].output.get("conversation_summary", {})
      memories: $ [m for m in steps[2].output.get("memories", []) if m.get("content")]
      birth_details: $ steps[2].output.get("birth_details", {})

  # Persist memories to Memory Store when a token is available
  - if: $ _.memory_store_token and len(steps[3].output.memories) > 0
    then:
      - tool: mcp_discover
        arguments: {}
      - evaluate:
          available_tools: $ steps[4].output.get("tools", []) if isinstance(steps[4].output, dict) else []
          store_tool: $ next((tool["name"] for tool in _.available_tools if tool["name"] in ["store", "store_memory", "remember", "write_memory"]), None)
      - if: $ _.store_tool is not None
        then:
          - tool: mcp_execute
            arguments:
              tool_name: $ _.store_tool
              arguments:
                entries: $ steps[3].output.memories
        else:
          - continue: null

  # Return payload for MongoDB + follow-up orchestration
  - return:
      julep_user_id: $ _.julep_user_id
      conversation_id: $ _.conversation_id
      overview_updates: $ steps[3].output.overview_updates
      conversation_summary: $ steps[3].output.conversation_summary
      memories: $ steps[3].output.memories
      birth_details: $ steps[3].output.birth_details
