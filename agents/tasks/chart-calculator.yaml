name: Calculate Astrology Birth Chart
description: Generate comprehensive Vedic and Western astrology charts from birth data

input_schema:
  type: object
  required:
    - julep_user_id
    - birth_date
    - birth_time
    - birth_location
  properties:
    julep_user_id:
      type: string
      description: Julep user ID for tracking
    birth_date:
      type: string
      description: Date of birth in YYYY-MM-DD format
    birth_time:
      type: string
      description: Birth time in HH:MM 24-hour format
    birth_location:
      type: string
      description: Birth location as "City, Country"
    birth_timezone:
      type: string
      description: IANA timezone (e.g., "Asia/Kolkata")
      default: "UTC"
    ayanamsha:
      type: string
      default: "lahiri"
      description: Ayanamsha for Vedic calculations

main:
  # Prepare input context
  - evaluate:
      birth_context: $ f"{steps[0].input.birth_date} at {steps[0].input.birth_time} in {steps[0].input.birth_location} ({steps[0].input.birth_timezone or 'UTC'})"

  # Generate Vedic chart
  - prompt: |-
      You are a Vedic astrologer. Calculate a complete Vedic birth chart.
      
      Birth Data: {steps[0].output.birth_context}
      Ayanamsha: {steps[0].input.ayanamsha}
      
      Return ONLY valid JSON (no markdown, no explanations) with these fields:
      - system: "vedic"
      - sun_sign: string (e.g. "Leo")
      - moon_sign: string
      - ascendant: string
      - planets: array of objects with name, sign, house, degree, nakshatra, retrograde
      - dasha: object with current_mahadasha, current_antardasha
      - chart_summary: string (3-4 sentences about personality and life path)
      
      Use precise astronomical calculations. Be scientifically accurate.
    unwrap: true

  # Parse Vedic chart
  - evaluate:
      vedic_chart_cleaned: $ steps[1].output.strip().removeprefix('```json').removeprefix('```').removesuffix('```').strip()
  
  - evaluate:
      vedic_chart: $ json.loads(steps[2].output.vedic_chart_cleaned)

  # Generate Western chart
  - prompt: |-
      You are a Western astrologer. Calculate a complete Western birth chart.
      
      Birth Data: {steps[0].output.birth_context}
      
      Return ONLY valid JSON (no markdown, no explanations) with these fields:
      - system: "western"
      - sun_sign: string (e.g. "Gemini")
      - moon_sign: string
      - rising_sign: string
      - planets: array of objects with name, sign, house, degree, retrograde
      - aspects: array of major aspects (conjunction, trine, square, etc.)
      - chart_summary: string (3-4 sentences about personality)
      
      Use tropical zodiac and Placidus houses. Be scientifically accurate.
    unwrap: true

  # Parse Western chart
  - evaluate:
      western_chart_cleaned: $ steps[4].output.strip().removeprefix('```json').removeprefix('```').removesuffix('```').strip()
  
  - evaluate:
      western_chart: $ json.loads(steps[5].output.western_chart_cleaned)

  # Find famous people with same birth date
  - prompt: |-
      List 5-7 notable people born on {steps[0].input.birth_date} (ignore year, just month and day).
      
      Include diverse types: technologists, artists, poets, leaders, scientists, etc.
      
      Return ONLY valid JSON array (no markdown) with objects containing:
      - name: string
      - category: string (e.g. "Technologist", "Artist", "Poet", "Leader")
      - known_for: string (brief description, 10-15 words)
      - birth_year: number
      
      Be factually accurate. Use real historical figures.
    unwrap: true

  # Parse famous people
  - evaluate:
      famous_people_cleaned: $ steps[7].output.strip().removeprefix('```json').removeprefix('```').removesuffix('```').strip()
  
  - evaluate:
      famous_people: $ json.loads(steps[8].output.famous_people_cleaned)

  # Return complete chart data
  - return:
      julep_user_id: $ steps[0].input.julep_user_id
      success: true
      birth_chart:
        vedic: $ steps[3].output.vedic_chart
        western: $ steps[6].output.western_chart
        famous_people: $ steps[9].output.famous_people
        calculated_at: $ datetime.now().isoformat()
